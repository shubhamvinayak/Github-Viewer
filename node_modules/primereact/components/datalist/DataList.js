'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DataList = exports.Footer = exports.Header = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Paginator = require('../paginator/Paginator');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = exports.Header = function (_Component) {
    _inherits(Header, _Component);

    function Header() {
        _classCallCheck(this, Header);

        return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    }

    _createClass(Header, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'ui-datalist-header ui-widget-header ui-corner-top' },
                this.props.children
            );
        }
    }]);

    return Header;
}(_react.Component);

var Footer = exports.Footer = function (_Component2) {
    _inherits(Footer, _Component2);

    function Footer() {
        _classCallCheck(this, Footer);

        return _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).apply(this, arguments));
    }

    _createClass(Footer, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'ui-datalist-footer ui-widget-header ui-corner-bottom' },
                this.props.children
            );
        }
    }]);

    return Footer;
}(_react.Component);

var DataList = exports.DataList = function (_Component3) {
    _inherits(DataList, _Component3);

    function DataList(props) {
        _classCallCheck(this, DataList);

        var _this3 = _possibleConstructorReturn(this, (DataList.__proto__ || Object.getPrototypeOf(DataList)).call(this, props));

        _this3.state = {};
        _this3._first = 0;
        _this3._totalRecords = _this3.props.totalRecords;
        _this3._page = 0;
        _this3.value = _this3.props.value;
        return _this3;
    }

    _createClass(DataList, [{
        key: 'updatePaginator',
        value: function updatePaginator() {
            //total records
            this._totalRecords = this.props.lazy ? this._totalRecords : this.value ? this.value.length : 0;

            //first
            if (this._totalRecords && this._first >= this._totalRecords) {
                var numberOfPages = Math.ceil(this._totalRecords / this.rows);
                this._first = Math.max((numberOfPages - 1) * this.props.rows, 0);
            }
        }
    }, {
        key: 'paginate',
        value: function paginate(event) {
            this._first = event.state.first;
            this._rows = event.state.rows;

            if (this.props.lazy) {
                if (this.props.onLazyLoad) {
                    this.props.onLazyLoad(this.createLazyLoadMetadata());
                }
            } else {
                this.updateDataToRender(this.value);
            }
        }
    }, {
        key: 'updateDataToRender',
        value: function updateDataToRender(datasource) {
            if (this.props.paginator && datasource) {
                this.dataToRender = [];
                var startIndex = this.props.lazy ? 0 : this._first;
                for (var i = startIndex; i < startIndex + this.props.rows; i++) {
                    if (i >= datasource.length) {
                        break;
                    }

                    this.dataToRender.push(datasource[i]);
                }
            } else {
                this.dataToRender = datasource;
            }

            this.setState({ dataToRender: this.dataToRender });
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty() {
            return !this.dataToRender || this.dataToRender.length === 0;
        }
    }, {
        key: 'createLazyLoadMetadata',
        value: function createLazyLoadMetadata() {
            return {
                first: this._first,
                rows: this._rows
            };
        }
    }, {
        key: 'getBlockableElement',
        value: function getBlockableElement() {
            return this.dataListEl;
        }
    }, {
        key: 'updateComponent',
        value: function updateComponent() {
            if (this.props.paginator) {
                this.updatePaginator();
            }
            this.updateDataToRender(this.value);
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.updateComponent();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var newValue = nextProps.value;
            if (newValue) {
                this.value = newValue;

                this.updateComponent();
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.lazy) {
                if (this.props.onLazyLoad) {
                    this.props.onLazyLoad({
                        first: this._first,
                        rows: this._rows
                    });
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var styleClass = (0, _classnames2.default)('ui-datalist ui-widget', this.props.styleClass);

            var paginator = _react2.default.createElement(_Paginator.Paginator, { rows: this.props.rows, first: this._first, totalRecords: this._totalRecords, pageLinkSize: this.props.pageLinks,
                styleClass: 'ui-paginator-bottom', rowsPerPageOptions: this.props.rowsPerPageOptions, onPageChange: this.paginate.bind(this) }),
                topPaginator = this.props.paginator && (this.props.paginatorPosition !== 'bottom' || this.props.paginatorPosition === 'both') && paginator,
                bottomPaginator = this.props.paginator && (this.props.paginatorPosition !== 'top' || this.props.paginatorPosition === 'both') && paginator;

            var header = _react2.default.Children.map(this.props.children, function (element, i) {
                return element && element.type === Header && _react2.default.createElement(
                    Header,
                    null,
                    ' ',
                    element.props.children
                );
            }),
                footer = _react2.default.Children.map(this.props.children, function (element, i) {
                return element && element.type === Footer && _react2.default.createElement(
                    Footer,
                    null,
                    ' ',
                    element.props.children
                );
            }),
                content = _react2.default.createElement(
                'div',
                { className: 'ui-datalist-content ui-widget-content' },
                _react2.default.createElement(
                    'ul',
                    { className: 'ui-datalist-data' },
                    this.state.dataToRender && this.state.dataToRender.map(function (val, i) {
                        var listItemContent = _this4.props.itemTemplate ? _this4.props.itemTemplate(val) : val;
                        return _react2.default.createElement(
                            'li',
                            { key: i + '_datalistitem' },
                            listItemContent
                        );
                    })
                )
            );

            return _react2.default.createElement(
                'div',
                { ref: function ref(el) {
                        return _this4.dataListEl = _reactDom2.default.findDOMNode(el);
                    }, style: this.props.style, className: styleClass },
                header,
                topPaginator,
                content,
                bottomPaginator,
                footer
            );
        }
    }]);

    return DataList;
}(_react.Component);

DataList.defaultProps = {
    value: null,
    rows: null,
    paginator: false,
    totalRecords: null,
    pageLinks: 5,
    rowsPerPageOptions: null,
    lazy: false,
    style: null,
    styleClass: null,
    paginatorPosition: "bottom",
    onLazyLoad: null,
    itemTemplate: null
};
DataList.propsTypes = {
    value: _react.PropTypes.array,
    rows: _react.PropTypes.number,
    paginator: _react.PropTypes.bool,
    totalRecords: _react.PropTypes.number,
    pageLinks: _react.PropTypes.number,
    rowsPerPageOptions: _react.PropTypes.array,
    lazy: _react.PropTypes.bool,
    style: _react.PropTypes.string,
    styleClass: _react.PropTypes.string,
    paginatorPosition: _react.PropTypes.string,
    onLazyLoad: _react.PropTypes.func,
    itemTemplate: _react.PropTypes.func
};